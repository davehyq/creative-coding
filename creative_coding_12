import processing.sound.*;

// Images
PImage backgroundImage;
PImage fishmanImage;
PImage fishImage;

// Sounds
SoundFile rainSound; 
SoundFile fishjump; 

// Sun Properties
float sunX = 600;      // Sun position X
float sunY = 220;      // Sun position Y
float sunRadius = 40;  // Sun size
float glowRadius = 80; // Size of sun's glow effect
float sunBrightness = 500;  // Base brightness of the sun

// Smoke Properties
ArrayList<SmokeParticle> smokeParticles;
PVector smokeOrigin;

// Rain Properties
float[] rainX = new float[50];
float[] rainY = new float[50];
ArrayList<Ripple> ripples = new ArrayList<Ripple>();

// Firefly Properties
int numFireflies = 20;
float[] fireflyX = new float[numFireflies];
float[] fireflyY = new float[numFireflies];
float[] fireflyBrightness = new float[numFireflies];

// Fishman Properties
float fishmanX = 480;
float fishmanSpeed = 1;
boolean movingRight = true;

// Fish Properties
float fishX = 500;
float fishY = 750;
float fishVelocityY = 0;
float gravity = 0.5;
float jumpForce = -15;
boolean isJumping = false;
boolean fishVisible = false;
float restingY = 750;

void setup() {
  size(1194, 834);
  
  // Load and setup sounds
  rainSound = new SoundFile(this, "rain.mp3");
  rainSound.loop();
  rainSound.amp(0.5);
  fishjump = new SoundFile(this, "jump.mp3");
  
  // Initialize smoke system
  smokeParticles = new ArrayList<SmokeParticle>();
  smokeOrigin = new PVector(950, 400);
  
  // Load images
  backgroundImage = loadImage("background.jpg");
  backgroundImage.resize(width, height);
  fishmanImage = loadImage("fishman.png");
  fishmanImage.resize(400,600);
  fishImage = loadImage("fish.png");  
  fishImage.resize(50, 30);
  
  // Initialize rain drop positions
  for (int i = 0; i < rainX.length; i++) {
    rainX[i] = random(width);
    rainY[i] = random(height);
  }
  
  // Initialize firefly positions and brightness
  for (int i = 0; i < numFireflies; i++) {
    fireflyX[i] = random(width);
    fireflyY[i] = random(height);
    fireflyBrightness[i] = random(100, 255);
  }
}

void draw() {
  image(backgroundImage, 0, 0);
  
  // Update and draw smoke
  updateSmoke();
  drawSun();
  
  // Draw fishman
  image(fishmanImage, fishmanX, 270);
  
  // Fishman movement
  if (movingRight) {
    fishmanX += fishmanSpeed;
    if (fishmanX + fishmanImage.width > width - 250) {
      movingRight = false;
    }
  } else {
    fishmanX -= fishmanSpeed;
    if (fishmanX < 350) {
      movingRight = true;
    }
  }
  
  if (fishVisible) {
    updateFish();
    pushMatrix();
    translate(fishX, fishY);
    float rotation = map(fishVelocityY, -15, 15, -PI/6, PI/6);
    rotate(rotation);
    image(fishImage, -fishImage.width/2, -fishImage.height/2);
    popMatrix();
  }
  
  // Draw fireflies
  drawFireflies();
  
  // Draw rain drops
  stroke(#79CEFA);
  strokeWeight(2);
  for (int i = 0; i < rainX.length; i++) {
    line(rainX[i], rainY[i], rainX[i], rainY[i] + 10);
    
    if (isInRiver(rainX[i], rainY[i]) && random(1) < 0.3) {
      ripples.add(new Ripple(rainX[i], rainY[i]));
    }
    
    rainY[i] += 10;
    if (rainY[i] > height) {
      rainY[i] = 0;
      rainX[i] = random(width);
    }
  }
  
  // Draw ripples
  for (int i = ripples.size() - 1; i >= 0; i--) {
    Ripple r = ripples.get(i);
    r.grow();
    r.show();
    if (r.finished()) {
      ripples.remove(i);
    }
  }
}

void updateSmoke() {
  if (frameCount % 5 == 0) {
    smokeParticles.add(new SmokeParticle(smokeOrigin));
  }
  
  for (int i = smokeParticles.size()-1; i >= 0; i--) {
    SmokeParticle p = smokeParticles.get(i);
    p.update();
    p.display();
    if (p.isDead()) {
      smokeParticles.remove(i);
    }
  }
}
class SmokeParticle {
  PVector position;
  PVector velocity;
  float size;
  float alpha;
  float lifespan;
  
  SmokeParticle(PVector origin) {
    position = origin.copy();
    // Add some random offset to the origin
    position.x += random(-5, 5);
    
    // Initialize with upward velocity and some random horizontal movement
    velocity = new PVector(random(-0.3, 0.3), random(-1, -0.5));  // Slower, more gentle movement
    size = random(10, 20);  // Smaller initial size
    alpha = random(50, 100);  // More transparent
    lifespan = 255;
  }
  
  void update() {
    // Add some random movement
    velocity.x += random(-0.05, 0.05);  // More subtle horizontal drift
    
    // Update position
    position.add(velocity);
    
    // Grow in size more slowly
    size += 0.1;
    
    // Fade out
    lifespan -= 1.0;  // Slower fade
    alpha = map(lifespan, 0, 255, 0, 50);  // More transparent throughout
  }
  
  void display() {
    noStroke();
    fill(100, 100, 100, alpha);  // Darker smoke to match monochrome theme
    
    // Draw multiple overlapping circles for a more natural look
    for (int i = 0; i < 3; i++) {
      float offset = i * 3;  // Smaller offset between circles
      float currentSize = size + offset;
      ellipse(position.x + random(-1, 1), 
              position.y + random(-1, 1), 
              currentSize, 
              currentSize);
    }
  }
  
  boolean isDead() {
    return lifespan < 0;
  }
}

void updateFish() {
  if (isJumping) {
    fishVelocityY += gravity;
    fishY += fishVelocityY;
    
    if (fishY >= restingY) {
      fishY = restingY;
      fishVelocityY = 0;
      isJumping = false;
      fishVisible = false;
      ripples.add(new Ripple(fishX, fishY));
    }
  }
}

void mousePressed() {
  if (!isJumping) {
    fishVisible = true;
    isJumping = true;
    fishVelocityY = jumpForce;
    fishY = restingY;
    fishX = random(400, 830);
    ripples.add(new Ripple(fishX, fishY));
    fishjump.play();  // Play splash sound when fish jumps
  }
}

boolean isInRiver(float x, float y) {
  return x >= 350 && x <= 880 && y >= 700 && y <= height;
}

class Ripple {
  float x, y;
  float size;
  float fade = 255;
  float maxSize;
  
  Ripple(float x, float y) {
    this.x = x;
    this.y = y;
    size = 0;
    maxSize = random(25, 45);
  }

  void grow() {
    size += 1.2;
    fade = map(size, 0, maxSize, 255, 0);
  }

  void show() {
    noFill();
    stroke(255, fade);
    strokeWeight(2);

    for (int i = 0; i < 3; i++) {
      float gap = i * 2;
      float stretch = map(y, 500, height, 1.5, 2.5);
      ellipse(x, y, (size + gap) * 2, (size + gap) / stretch);
    }
  }

  boolean finished() {
    return size >= maxSize;
  }
}

void drawFireflies() {
  noStroke();
  for (int i = 0; i < numFireflies; i++) {
    fireflyX[i] += random(-1, 1);
    fireflyY[i] += random(-1, 1);
    
    fireflyX[i] = (fireflyX[i] + width) % width;
    fireflyY[i] = (fireflyY[i] + height) % height;
    
    fireflyBrightness[i] += random(-10, 10);
    fireflyBrightness[i] = constrain(fireflyBrightness[i], 100, 255);
    
    fill(255, 255, 0, fireflyBrightness[i]);
    ellipse(fireflyX[i], fireflyY[i], 6, 6);
  }
}

void drawSun() {
  noStroke();
  for (int i = 0; i < 8; i++) {
    float alpha = map(i, 0, 8, 60, 0);
    fill(255, 255, 220, alpha);
    float size = glowRadius + glowRadius * (i / 8.0);
    ellipse(sunX, sunY, size, size);
  }
  
  // Draw the sun
  fill(255, 255, 220, sunBrightness);
  ellipse(sunX, sunY, sunRadius * 2, sunRadius * 2);
}
